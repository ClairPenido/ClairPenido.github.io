{"version":3,"sources":["actions/index.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","pages/Form.js","pages/Table.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["SAVE_INPUTS","SAVE_CURRENCIES","SAVE_EXPENSES","INITIAL_STATE","email","currencies","expenses","rootReducer","combineReducers","user","state","action","type","payload","wallet","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","Login","onChangeInput","target","name","value","setState","checkInputs","senha","valido","test","length","handleSubmit","event","preventDefault","addInputs","props","redirect","statusSendButton","this","onSubmit","to","htmlFor","id","onChange","disabled","React","Component","connect","dispatch","input","saveInputs","Form","handleChange","a","addExpenses","fetch","then","response","json","estadoInicial","description","currency","method","tag","exchangeRates","map","coins","key","onClick","addDespesa","globalState","saveExpenses","Table","elem","parseFloat","toFixed","ask","Wallet","calcDespesaTotal","reduce","soma","despesa","saveCurrencies","Object","keys","filter","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e16b0706.chunk.js","sourcesContent":["// Coloque aqui suas actions\n//* aqui que irei salvar os inputs e moedas trazidas pela API.\n//* uma action para salvar os inputs e outra para mostrar role?\n\nexport const SAVE_INPUTS = 'SAVE_INPUTS';\nexport const SAVE_CURRENCIES = 'SAVE_CURRENCIES';\nexport const SAVE_EXPENSES = 'SAVE_EXPENSES';\n\nexport function saveInputs(input) {\n  return {\n    type: SAVE_INPUTS,\n    payload: input,\n  };\n}\n\nexport function saveCurrencies(currencies) {\n  return {\n    type: SAVE_CURRENCIES,\n    payload: currencies,\n  };\n}\n\nexport function saveExpenses(input, currencies) {\n  return {\n    type: SAVE_EXPENSES,\n    payload: {\n      ...input,\n      exchangeRates: currencies,\n    },\n  };\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\n//* aqui seta o estado inicial para essas infos\nimport { SAVE_INPUTS } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nexport default function userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SAVE_INPUTS:\n    return { ...state, ...action.payload };\n  default:\n    return state;\n  }\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\nimport { SAVE_CURRENCIES, SAVE_EXPENSES } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\nexport default function walletReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SAVE_CURRENCIES:\n    return { ...state,\n      currencies: action.payload,\n    };\n  case SAVE_EXPENSES:\n    return { ...state,\n      expenses: [...state.expenses, action.payload], // faz spread do estado inicial do expenses (stae.expenses), novo estado\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\n// Sempre fazer a Dispatch de uma action sempre que quiser alterar o estado global (stateglobal)\n\nexport default store;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { saveInputs } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      senha: '',\n      statusSendButton: true,\n      redirect: false,\n    };\n  }\n\n  onChangeInput = ({ target }) => { // pegar o value dos inputs de forma dinamica\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  // Botao começa desativado e precisa ativar somente quando\n  // estiver com email no formato valido e senha de no min 6 caracteres\n  checkInputs = () => {\n    const { email, senha } = this.state;\n    const numCaractMin = 6;\n    const reg = /^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/; // https://pt.stackoverflow.com/questions/1386/express%C3%A3o-regular-para-valida%C3%A7%C3%A3o-de-e-mail\n    const valido = reg.test(email);\n    return senha.length >= numCaractMin && valido; // returna true ou false\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { addInputs } = this.props;\n    addInputs(this.state);\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    const { email,\n      senha,\n      redirect,\n    } = this.state;\n    return (\n      <form onSubmit={ this.handleSubmit }>\n        {redirect && <Redirect to=\"/carteira\" />}\n        <label htmlFor=\"email\">\n          Email:\n          {' '}\n          <input\n            id=\"email\"\n            type=\"email\"\n            name=\"email\"\n            value={ email }\n            onChange={ this.onChangeInput }\n            data-testid=\"email-input\"\n          />\n        </label>\n        <label htmlFor=\"senha\">\n          Senha:\n          {' '}\n          <input\n            id=\"senha\"\n            type=\"password\"\n            name=\"senha\"\n            value={ senha }\n            onChange={ this.onChangeInput }\n            data-testid=\"password-input\"\n          />\n        </label>\n        <button\n          type=\"submit\"\n          disabled={ !this.checkInputs() }\n        >\n          Entrar\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({ // para ler estados\n  addInputs: (input) => dispatch(saveInputs(input)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  addInputs: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { saveExpenses } from '../actions';\n\nclass Form extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n    };\n  }\n\n  componentDidMount() {\n    this.estadoInicial = { ...this.state };\n  }\n\n  handleChange = ({ target }) => { // pegar o value dos inputs de forma dinamica\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    const { addExpenses, expenses } = this.props;\n    const { id } = this.state;\n    this.setState({\n      id: expenses.length === 0 ? 0 : id + 1,\n    });\n    await fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((currencies) => addExpenses(this.state, currencies));\n    this.setState({ ...this.estadoInicial, id });\n  }\n\n  render() {\n    const { value, description, currency, method, tag } = this.state;\n    const { currencies } = this.props;\n    return (\n      <form onSubmit={ this.handleSubmit }>\n        <label htmlFor=\"value-input\">\n          Valor da despesa:\n          {' '}\n          <input\n            data-testid=\"value-input\"\n            id=\"value-input\"\n            name=\"value\"\n            type=\"number\"\n            value={ value }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"description-input\">\n          Descrição:\n          {' '}\n          <input\n            data-testid=\"description-input\"\n            id=\"description-input\"\n            type=\"textArea\"\n            name=\"description\"\n            value={ description }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"moeda\">\n          Moeda:\n          {' '}\n          <select\n            name=\"currency\"\n            id=\"moeda\"\n            value={ currency }\n            onChange={ this.handleChange }\n          >\n            {currencies.map((coins) => (\n              <option key={ coins } value={ coins }>{ coins }</option>))}\n          </select>\n        </label>\n        <label htmlFor=\"method-input\">\n          Método de pagamento:\n          {' '}\n          <select\n            data-testid=\"method-input\"\n            name=\"method\"\n            id=\"method-input\"\n            value={ method }\n            onChange={ this.handleChange }\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag-input\">\n          Método de pagamento:\n          {' '}\n          <select\n            data-testid=\"tag-input\"\n            name=\"tag\"\n            id=\"tag-input\"\n            value={ tag }\n            onChange={ this.handleChange }\n          >\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        <button\n          type=\"submit\"\n          onClick={ this.addDespesa }\n        >\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\nconst mapStateToProps = (globalState) => ({\n  currencies: globalState.wallet.currencies,\n  expenses: globalState.wallet.expenses,\n});\nconst mapDispatchToProps = (dispatch) => ({ // para ler estados\n  addExpenses: (input, exchangeRates) => dispatch(saveExpenses(input, exchangeRates)),\n});\n\nForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  addExpenses: PropTypes.func.isRequired,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Table extends React.Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {expenses.map((elem) => (\n            <tr key={ elem.id }>\n              <td>{elem.description}</td>\n              <td>{elem.tag}</td>\n              <td>{elem.method}</td>\n              <td>{parseFloat(elem.value).toFixed(2)}</td>\n              <td>{elem.exchangeRates[elem.currency].name}</td>\n              <td>{parseFloat(elem.exchangeRates[elem.currency].ask).toFixed(2)}</td>\n              <td>\n                {parseFloat(elem.value * elem\n                  .exchangeRates[elem.currency].ask).toFixed(2)}\n              </td>\n              <td>Real</td>\n              <td>\n                <button type=\"button\">Editar</button>\n                <button type=\"button\">Editar</button>\n              </td>\n            </tr>))}\n        </tbody>\n      </table>\n    );\n  }\n}\nconst mapStateToProps = (globalState) => ({\n  expenses: globalState.wallet.expenses,\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { saveCurrencies } from '../actions';\nimport Form from './Form';\nimport Table from './Table';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      currencies: 'BRL',\n    };\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((currencies) => dispatch(saveCurrencies(Object.keys(currencies)\n        .filter((coins) => coins !== 'USDT'))));\n  }\n  // pegar value do input e o currency\n  // achar o ask do currency e * o value\n\n  calcDespesaTotal = () => {\n    const { expenses } = this.props;\n    const despesaIndividual = expenses.map((elem) => {\n      const { currency } = elem;\n      const resultado = elem.value * elem.exchangeRates[currency].ask; // está acessando no rates o mesmo nome da currency\n      return resultado;\n    });\n    const despesaTotal = despesaIndividual.reduce((soma, despesa) => soma + despesa, 0);\n    return despesaTotal.toFixed(2);\n  }\n\n  render() {\n    const { email } = this.props;\n    const { currencies } = this.state;\n    return (\n      <header>\n        <h1>TrybeWallet</h1>\n        <h3 data-testid=\"email-field\">{email}</h3>\n        <h3 data-testid=\"total-field\">\n          { this.calcDespesaTotal() }\n        </h3>\n        <h3 data-testid=\"header-currency-field\">\n          {' '}\n          {currencies}\n          {' '}\n        </h3>\n        <Form />\n        <Table />\n      </header>\n    );\n  }\n}\nconst mapStateToProps = (globalState) => ({\n  email: globalState.user.email,\n  expenses: globalState.wallet.expenses,\n});\nexport default connect(mapStateToProps)(Wallet);\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Hello, TrybeWallet!</h1>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}